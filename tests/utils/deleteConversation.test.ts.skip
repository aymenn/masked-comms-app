import { deleteConversation } from "../../src/utils";
import client from '../../src/twilioClient'

jest.mock('../../src/twilioClient')
let mockedClient = jest.mocked(client, true)

describe('deleteConversation util', () => {
  beforeEach(() => {
    jest.resetAllMocks()
  })
  
  it('it deletes conversation', async () => {
    const createSpy = jest.fn((options) => { return options })
    mockedClient['conversations'] = {
      conversations: {
        conversations: (options) => {
          remove: createSpy(options) 
        }
      }
    } as any


    const result = await deleteConversation("myConversationSid")
    expect(createSpy).toBeCalledWith("myConversationSid")
    //expect(result).toEqual(true)
  })

  // it('calls quit if error is not a 429 retry', async () => {
  //   mockedClient['conversations'] = {
  //     conversations: {
  //       conversation: (options) =>{
  //         remove: (options) => {
  //           throw new Error('Twilio Problem') 
  //         }
  //       }
  //     }
  //   } as any

  //   const consoleSpy = jest.spyOn(console, 'log');

  //   try {
  //     await deleteConversation("myConversationSid");
  //   } catch (e) {
  //     expect(consoleSpy).toHaveBeenCalledWith('Quit without retry');
  //   }
  // })



  // it('throws error to retry on 429 status code', async () => {

  //   interface TwilioError extends Error {
  //     status: number
  //   }

  //   class TwilioError extends Error {
  //     constructor(message) {
  //       super(message);
  //       this.name = "ConcurrencyLimit";
  //       this.status = 429
  //     }
  //   }

  //   mockedClient['conversations'] = {
  //     conversations: {
  //       delete: (options) => {
  //         throw new TwilioError('Too many requests')
  //       }
  //     }
  //   } as any

  //   const consoleSpy = jest.spyOn(console, 'log');

  //   try {
  //     await deleteConversation(
  //      "myConversationSid",
  //       { retries: 0, factor: 1, maxTimeout: 0, minTimeout: 0 });
  //   } catch (e) {
  //     expect(consoleSpy).toHaveBeenCalledWith('Re-trying on 429 error');
  //   }
  // })



})