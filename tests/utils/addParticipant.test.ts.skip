import { addParticipant } from "../../src/utils";
import client from '../../src/twilioClient';

import { ParticipantInstance, ParticipantListInstanceCreateOptions } from "twilio/lib/rest/conversations/v1/conversation/participant";


jest.mock('../../src/twilioClient')
let mockedClient = jest.mocked(client, true)

const mockParticipant: Partial<ParticipantListInstanceCreateOptions> = {
  identity: "+1234",
}

describe('addParticipant util', () => {
  beforeEach(() => {
    jest.resetAllMocks()
  })

   
  it('it adds participant to conversation', async () => {
    const createSpy = jest.fn((options) => { return options })
    mockedClient['conversations'].conversations('123').participants = {
      participants:{
        create: (opt) => createSpy(opt)
      }
    } as any
    // mockedClient['conversations'] = {
    //   conversations: (opt1) => {
    //     fetch: (options) => {return options},
    //     participants: {
    //       create: (options) => jest.fn().mockResolvedValue({...mockParticipant})
    //     }
    //   }
    // } as any

    // mockedClient['conversations'].conversations().

    const result = await addParticipant("+1234", mockParticipant );
    expect(createSpy).toBeCalledWith("+1234", mockParticipant);
    expect(result).not.toBeNull();

  })



})